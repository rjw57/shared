// Return the (unpremultiplied) value of the pixel
// at a particular offset.
vec4 pixel_at(sampler src, vec2 offset) 
{
  return unpremultiply( sample( src,
    samplerTransform( src, destCoord() + offset) ) );
}

kernel vec4 edge_detect(sampler src)
{
  // We use a sobel filter. This works on the 3x3 neighbourhood
  // of the pixel.

  // Get the neighbourhood.
  vec4 p00 = pixel_at(src, vec2( -1, -1 ));
  vec4 p10 = pixel_at(src, vec2(  0, -1 ));
  vec4 p20 = pixel_at(src, vec2(  1, -1 ));
  vec4 p01 = pixel_at(src, vec2( -1,  0 ));
  vec4 p21 = pixel_at(src, vec2(  1,  0 ));
  vec4 p02 = pixel_at(src, vec2( -1,  1 ));
  vec4 p12 = pixel_at(src, vec2(  0,  1 ));
  vec4 p22 = pixel_at(src, vec2(  1,  1 ));

  float src_alpha = sample(src, samplerCoord(src)).a;

  // Find the sobel response in X- and Y-directions.
  vec4 dx = p00 - p20 + 2 * (p01 - p21) + p02 - p22;
  vec4 dy = p00 - p02 + 2 * (p10 - p12) + p20 - p22;

  // Calculate the magnitude of the response, we
  // multiply by 0.25 so that the filter does not
  // give a response > 1.
  vec4 mag = 0.25 * sqrt( dx*dx + dy*dy );

  return premultiply( vec4( mag.rgb, src_alpha ) );
}

